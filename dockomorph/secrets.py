import os
import errno
import logging

from twisted.python import filepath

_SecretsDir = os.path.expanduser('~/.dockomorph/secrets')

"""Security Assumptions:

128 bits of entropy is sufficient. These secrets are small in number and
generated by the dockomorph process, so there is no risk of birthday
attack. Direct collision by brute forcing should require 2^127ish
attempts on average, so there is no need for code complexity for rate
limiting.

This also assumes there are side-channel protections (eg constant time
protection) for the secrets.

The source is os.urandom, so /dev/urandom on linux. We assume the
dockomorph process is started after this CSPRNG is seeded, and it
isn't compromised by eg a weak vm environment, side channels, or vm
state rollbacks.
"""
_SecretByteSize = 16


def create_or_load_secret(name):
    """
    Return the persistent secret for the given name. If it doesn't exist,
    it is created.
    """
    secretsdir = filepath.FilePath(_SecretsDir)
    try:
        secretsdir.makedirs()
    except os.error as e:
        if e.errno != errno.EEXIST:
            raise

    path = secretsdir.child(name)
    try:
        with path.open('r') as f:
            return f.read()
    except IOError as e:
        if e.errno != errno.ENOENT:
            raise

    secret = os.urandom(_SecretByteSize).encode('hex')
    with path.open('w') as f:
        f.write(secret)

    log = logging.getLogger('secrets')
    log.info('Initialized secret %r to: %s', name, secret)
    return secret
